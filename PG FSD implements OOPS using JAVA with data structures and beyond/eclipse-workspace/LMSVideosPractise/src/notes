Multitasking - multiple programs running parallelly - it is an illusion shows that it runs parallelly
but processors run only one at a time - so called Multitasking using process - but the problem here is 
when we divide tasks into process, each having its own memory - so when we move from youtube to another app
context switching happens - switch from one process to other and it has to remember where it stops to get back to the same 
portion it stopped earlier - they are heavy weighted, theu contain their own memory and not share any memory cross - not  as fast as threading

Multitasking using threads - instead of creating multiple processes why not create multiple subprocess inside a process 
multiple subprocesses inside one single process 
all of these subprocess shared single memory which is part of that process, they do not have independent memory of own 
so, even if one thread got stopped the other thread runs independently 

concept of multithreading or multitasking using process is running multiple programs at the same time or concurrent processing or paralle corssing

Threads:light weight process - sub process which executes as a seperate program - which is ued to execute multiple tasks simultaneously 

thread will have shared memory vs process will have individual memory 
threads run inside a process
execution is faster
memory intensive 

how to run programs parallelly? 

example - when you take a program and lets say there are 4 or 5 functions in it which we can call tasks also 
each of these tasks can be executed simultaneously using threading concept 

Thread life cycle:
new 
runnable - ready to run
waiting/sleeping/blocking - it is just waiting  
running - actually when it runs
terminated 

Thread priority:
sets by default 
or,
public final void setPriority(int newPriority) method 
getPriority() is to get the priority value 

min priority = 0
max = 10
default = 5


Demon thread:
service provider threads 
to just provide services to the user threads 
priority level - low
examples are - garbage collection, finalizer 


Thread scheduling and sleeping: its all about,
how you think JVM should know which thread to run first?
How do i identify the next thread to run?
1. Deciding which one to run first
2. Arranging in a way so that i can pick thread
Scheduling is a set of programs or algorithms using which the JVM decides which one to pick first 
1. pre-emptive - before a thread finishes, it is given to another
2. time slicing - every thread will be given some time after that JVM stores all context and go to next thread 

how to put a thread to sleep state for some time?
Advantage is that JVM can be given to somebody else
overloaded methods, 
public static void sleep(long milisec)
throws InterruptedException
public static void sleep(long milisec, int nanos)
throws InterruptedException


Thread synchronization:
how to ensure the data is not messed up when multiple threads are accessing common resource  
1. To prevent thread interference 
2. To prevent consistency problem 

Syncorinized method: 
when it is invoked, it locks the object and release it once the task is completed
synchronized void printing(int n, String s)  // until printing is done it wont let other object to access it 
unless it is finished it wont give control to others 

Static Synchronized method:
it will lock the class not the object 
synchonized sttatic void printing(int numbers) 

Inter thread communication:
- also called cooperation
-synchronized threads communicate with each other - like wait(), notify(), notifyAll()

Interrupt a thread: stopping that guy in the middle
- JVM can be given to other thread only when thread goes to sleep state 
When interrupt() on a thread in sleeping or waiting state, breaks out the sleeping or waiting state and throws InterruptedException 
It interrupts a thread from sleeping or waiting state 
public void interrupt()
public static boolean interrupted()
public boolean isInterrupted() - it gives true for non sleeping threads but it never interrupts that thread

Wrapper classes:
int, float, double - are primitive datatypes
wrapper classes can turn the datatypes into objects 
also get many functions tied to it
primitive datatypes - wrapper class
boolean - Boolean
char - Character
byte - Byte
short - Short
int - Integer
long - Long
float - Float
double - Double 

char a = 'a';
Integer b = new Integer(132); // it is a wrapper object rather than primitive datatype


Autoboxing - converting primitives into object datatypes
Unboxing - converting datatypes into primitives 
Integer x = new Integer(540);
int a = x;


collection:
A single group of multiple objects 
it provides an architecture so that you can store and manipulate these groups of objects 
multiple operations like searching() sorting() insertion() manipulation() and deletion()
provides multiple interfaces like - Set, List, Array list, Deque, Queue, Hash set 
comes under java.util
// concrete class - all of the classes methods are implemented and we can just use it meanwhile in 
// abstract class we have to define the methods in the classes we inherit it into
// abstract classes are function headers or prototype signature or function signature are written but the 
// implementation is left to class which extends it ot inherits it 

Map is like a dictionary, it is an interface 
Instances of map represents a group of objects, each of which is associated with a key.
One can get the object from a map using a key, and one have to use a key to put the object into the map

Set interface in collection:
Creates an abstraction of mathematical elements 
no duplicate elements - only unique
no ordering in sets
E is type of elements maintained by this set
Superinterfaces = Collection<E>, Iterable<E>
Subinterfaces = EventSet, NavigableSet<E>, SortedSet<E>

HashCode() in collection:
returns the hash code for the input given
it is a method of java Integer class
by default this method returns a random integer that is unique for each instance 
hashCode(int value) it is an inbuilt java integer class method which determines a hash code for a given int value 
compatible with integer.HashCode() 

List in collection:
ordered data structure - ordered collection
duplicates are permitted
also called sequence
E is type of elements maintained by this set
Superinterfaces = Collection<E>, Iterable<E>
allows you to access elements by indexing - from 0 
List interface provides ListIterator - get elements from the list object one by one 
from both directions left to right and vise versa - bidirectional 

Queue in collection:
order elements in First In First Out manner - FIFO

Comparator interface:
it is used to order the objects of user defined classes 
public int compare(Object obj1, Object obj2);

Deque:
double ended queue - element insertion and removal at both ends
used as a queue also
no indexing 
all part of java collection 

Map:
key value pair 
map cannot contain duplicate keys, each key can map to at most one value 
no ordering like sets 
Sorted map 

HashSet - like set interface
LinkedHashSet - both hash table and linked list implementation 
ArrayList - it is resizable not like arrays which are not resizable
TreeSet - 
ArrayDeque - 

ForEach method:
perform the given action for each elements of the iterable until all elements
have been processed or the action throws an exception
public void forEach(Consumer<? super E> action)


Stream - means flow of data in java
Makes I/O operations faster 
makes platform independent 
part of java.io package
file handling done with the help of I/O stream 
3 I/O streams:
Standard input(System.in)
Standard output(System.out)
Standard error(System.err)


Java.io.file class:
Abstract representation of file and path name
File class object created by passing the filename or directory name to it
File a = new File("/usr/local/pgm/java");


Junit - unit testing framework
Where we have to write test cases and ensure code is working for all the test cases properly 


Logger - log4j it is open source
Loggers, appenders, layouts - comes under core objects
Loggers - capturing and logging data 
Appenders - publish logging data to desired destinations 
Layouts - formatting information in different styles 


Debugging:
processing of identifying bugs and fixing it
detecting bugs 
if not able to figure out the problem put print statements in code

Tracing - process to redirect any output in the java console to a trace file - a file with all traced information 
Deployement.Trace.Level set to all gives all this levels - basic, cache, net, security, ext, liveconnect, drs 
basic is a basic tracing level 
0 to 5, like 0 - trace level is off, 1 is basic trace level features, 2 for network, caching and basic, 3 network, basic security, 4. network, security, basic, ext
5 is for live connect, ext, security, network, basic, drs

why log capture?
lot of monitors can be put on the logs to assess system performance 
even if there are any problems in code then can look at the logs to understand the problem
write to a trace file, using java logging API
- Debug mode means every small information will be logged
ideally debug mode is not turned on in live system 
we can use logged information for analysis, detect bugs, correct code, optimize, improve performance, monitoring code

Log levels:
Log level at java level is a class, level class - consists of info, warning, severe, error
7 basic log levels and 2 special ones 
Severe - value is 1000, Warning - 900, info - 800, config - 700, fine - 500, finer - 400, finest - 300, off, all 
fine, finer, finest are detailed granular level 
info - all information messages is logged - capture in a log file
severe - message indicates serious failure - which cannot be recovered 
Warning - it is a problem but system can run with it 
Logger class help us to log our information
call get Logger method to get the object, then can mention log levels 

Stack trace:
location of the exception 
stack means from the point the code is failed or broke to the point it got called 
with stack trace, collect all the information related to code and understand where the code have broken 
throwable.Getstacktrace()
print stacktrace() to print stack trace in std.out 
each stack frame represents the name of the method, the name of the file and the source code line number 
if log doesn't have sufficient information to debug, then the program is not robust, program which is tolerable to failure and stable enough
only possible when proper exception handling and logging present in code 

Logging:
quick debugging - diagnose the problems much faster
easy maintenance  
cost and time saving - no need to put time to understand what happened in code 
less human effort as there is every information in the log 
using - SLF4J or Apache LOG4J
LOG4J is open source, faster, named log hierarchy like severe, info 

best practices:
use static modifier for logger object 
if one declares it as static then multiple objects shares the same variable 
log4j.appender.mail = org.apache.log4j.net.SMTPAppender


Static keyword:
int v = 10; will get memory each time when the instance is created  
static int v = 10; will get memory only once and retain its value  
static methods can be called without creating instance of the class




